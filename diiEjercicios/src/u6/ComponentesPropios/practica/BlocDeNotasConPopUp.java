/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package u6.ComponentesPropios.practica;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author Manana
 */
public class BlocDeNotasConPopUp extends javax.swing.JFrame {

    /**
     * Creates new form BlocDeNotas
     */
    public BlocDeNotasConPopUp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUpMenu = new javax.swing.JPopupMenu();
        MenuCopiarSelecc = new javax.swing.JMenuItem();
        MenuCortarSelecc = new javax.swing.JMenuItem();
        MenuPegarSelecc = new javax.swing.JMenuItem();
        MenuSeleccionarTodo = new javax.swing.JMenuItem();
        MenuBuscar = new javax.swing.JMenuItem();
        MenuTipografia = new javax.swing.JMenu();
        tipo1 = new javax.swing.JMenuItem();
        tipo2 = new javax.swing.JMenuItem();
        tipo3 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNuevo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemGuardar = new javax.swing.JMenuItem();
        jMenuItemCerrarPesta√±a = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemColorTexto = new javax.swing.JMenuItem();
        jMenuItemColorFondo = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemAcercaDe = new javax.swing.JMenuItem();

        MenuCopiarSelecc.setText("Copiar texto seleccionado");
        MenuCopiarSelecc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCopiarSeleccActionPerformed(evt);
            }
        });
        popUpMenu.add(MenuCopiarSelecc);

        MenuCortarSelecc.setText("Cortar");
        MenuCortarSelecc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCortarSeleccActionPerformed(evt);
            }
        });
        popUpMenu.add(MenuCortarSelecc);

        MenuPegarSelecc.setText("Pegar");
        MenuPegarSelecc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuPegarSeleccActionPerformed(evt);
            }
        });
        popUpMenu.add(MenuPegarSelecc);

        MenuSeleccionarTodo.setText("Seleccionar todo");
        MenuSeleccionarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSeleccionarTodoActionPerformed(evt);
            }
        });
        popUpMenu.add(MenuSeleccionarTodo);

        MenuBuscar.setText("Buscar");
        MenuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBuscarActionPerformed(evt);
            }
        });
        popUpMenu.add(MenuBuscar);

        MenuTipografia.setText("Tipografia");

        tipo1.setText("Arial");
        tipo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipo1ActionPerformed(evt);
            }
        });
        MenuTipografia.add(tipo1);

        tipo2.setText("Calibri");
        tipo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipo2ActionPerformed(evt);
            }
        });
        MenuTipografia.add(tipo2);

        tipo3.setText("Times new Roman");
        tipo3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipo3ActionPerformed(evt);
            }
        });
        MenuTipografia.add(tipo3);

        popUpMenu.add(MenuTipografia);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);
        textArea.setComponentPopupMenu(popUpMenu);

        jTabbedPane1.addTab("tab1", jScrollPane1);

        jToolBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jToolBar1.setRollover(true);

        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);
        jToolBar1.add(jSeparator1);

        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);
        jToolBar1.add(jSeparator2);

        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenu1.setText("Archivo");

        jMenuItemNuevo.setText("Nuevo");
        jMenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNuevo);

        jMenuItemAbrir.setText("Abrir");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAbrir);

        jMenuItemGuardar.setText("Guardar");
        jMenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemGuardar);

        jMenuItemCerrarPesta√±a.setText("Cerrar Pesta√±a");
        jMenuItemCerrarPesta√±a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCerrarPesta√±aActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCerrarPesta√±a);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Vista");

        jMenuItemColorTexto.setText("Color de texto");
        jMenuItemColorTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemColorTextoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemColorTexto);

        jMenuItemColorFondo.setText("Color de fondo");
        jMenuItemColorFondo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemColorFondoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemColorFondo);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ayuda");

        jMenuItemAcercaDe.setText("Acerca de");
        jMenuItemAcercaDe.setToolTipText("");
        jMenuItemAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAcercaDeActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemAcercaDe);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
JFileChooser fileChooser = new JFileChooser();
    int option = fileChooser.showOpenDialog(this);

    if (option == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();
        
        try (FileReader reader = new FileReader(archivo)) {
            JTextArea textArea = new JTextArea();
            textArea.read(reader, null);  // Leer el archivo en el JTextArea

            JScrollPane scrollPane = new JScrollPane(textArea);
            jTabbedPane1.addTab(archivo.getName(), scrollPane);  // A√±adir nueva pesta√±a con el contenido del archivo
            jTabbedPane1.setSelectedComponent(scrollPane);  // Establecer la nueva pesta√±a como la activa
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al abrir el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGuardarActionPerformed
   
    JScrollPane scrollPane = (JScrollPane) jTabbedPane1.getSelectedComponent();
    JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();

    JFileChooser fileChooser = new JFileChooser();
    int option = fileChooser.showSaveDialog(this);

    if (option == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();

        if (!archivo.getName().toLowerCase().endsWith(".txt")) {
            archivo = new File(archivo.getAbsolutePath() + ".txt");
        }

        try (FileWriter writer = new FileWriter(archivo)) {
            textArea.write(writer); 
            JOptionPane.showMessageDialog(this, "Archivo guardado con √©xito", "Guardado", JOptionPane.INFORMATION_MESSAGE);

           
            int selectedTabIndex = jTabbedPane1.getSelectedIndex();
            jTabbedPane1.setTitleAt(selectedTabIndex, archivo.getName());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jMenuItemGuardarActionPerformed

    private void jMenuItemColorTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemColorTextoActionPerformed
         Color nuevoColor = javax.swing.JColorChooser.showDialog(this, "Elige un color para el texto", textArea.getForeground());

    if (nuevoColor != null) {
        JScrollPane scrollPane = (JScrollPane) jTabbedPane1.getSelectedComponent();
        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();
        
        textArea.setForeground(nuevoColor);
    }
    }//GEN-LAST:event_jMenuItemColorTextoActionPerformed

    private void jMenuItemColorFondoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemColorFondoActionPerformed
   Color nuevoColor = javax.swing.JColorChooser.showDialog(this, "Elige un color para el fondo", textArea.getBackground());

    if (nuevoColor != null) {
        JScrollPane scrollPane = (JScrollPane) jTabbedPane1.getSelectedComponent();
        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();
        
        textArea.setBackground(nuevoColor);
    }
    }//GEN-LAST:event_jMenuItemColorFondoActionPerformed

    private void jMenuItemAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAcercaDeActionPerformed
         JOptionPane.showMessageDialog(this, 
        "Aplicaci√≥n Bloc de Notas\n" + "Desarrollado por: Jer√≥nimo\n" + "Versi√≥n: 1.0\n" + "Fecha: 24/10/2024", "Informaci√≥n de autor√≠a", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAcercaDeActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    int option = JOptionPane.showConfirmDialog(this, "¬øDeseas guardar los datos antes de cerrar?", "Confirmar cierre", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

    if (option == JOptionPane.YES_OPTION) {
        jMenuItemGuardarActionPerformed(null);  
        this.dispose();  
    } else if (option == JOptionPane.NO_OPTION) {
        this.dispose(); 
    }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevoActionPerformed
    JTextArea textArea = new JTextArea();
    JScrollPane scrollPane = new JScrollPane(textArea);
    
    jTabbedPane1.addTab("Nuevo Documento", scrollPane);
    
    jTabbedPane1.setSelectedComponent(scrollPane);
    }//GEN-LAST:event_jMenuItemNuevoActionPerformed

    private void jMenuItemCerrarPesta√±aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCerrarPesta√±aActionPerformed
         int selectedTab = jTabbedPane1.getSelectedIndex();  
    if (selectedTab != -1) {
        int option = JOptionPane.showConfirmDialog(this, "¬øDeseas guardar los cambios antes de cerrar la pesta√±a?", "Confirmar cierre de pesta√±a", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (option == JOptionPane.YES_OPTION) {
            jMenuItemGuardarActionPerformed(null);  
            jTabbedPane1.remove(selectedTab);  
        } else if (option == JOptionPane.NO_OPTION) {
            jTabbedPane1.remove(selectedTab);  
        }
    }
    }//GEN-LAST:event_jMenuItemCerrarPesta√±aActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JTextArea textArea = new JTextArea();
    JScrollPane scrollPane = new JScrollPane(textArea);
    
    jTabbedPane1.addTab("Nuevo Documento", scrollPane);
    
    jTabbedPane1.setSelectedComponent(scrollPane);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
    int option = fileChooser.showOpenDialog(this);

    if (option == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();
        
        try (FileReader reader = new FileReader(archivo)) {
            JTextArea textArea = new JTextArea();
            textArea.read(reader, null);  // Leer el archivo en el JTextArea

            JScrollPane scrollPane = new JScrollPane(textArea);
            jTabbedPane1.addTab(archivo.getName(), scrollPane);  // A√±adir nueva pesta√±a con el contenido del archivo
            jTabbedPane1.setSelectedComponent(scrollPane);  // Establecer la nueva pesta√±a como la activa
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al abrir el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
          
    JScrollPane scrollPane = (JScrollPane) jTabbedPane1.getSelectedComponent();
    JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();

    JFileChooser fileChooser = new JFileChooser();
    int option = fileChooser.showSaveDialog(this);

    if (option == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();

        if (!archivo.getName().toLowerCase().endsWith(".txt")) {
            archivo = new File(archivo.getAbsolutePath() + ".txt");
        }

        try (FileWriter writer = new FileWriter(archivo)) {
            textArea.write(writer); 
            JOptionPane.showMessageDialog(this, "Archivo guardado con √©xito", "Guardado", JOptionPane.INFORMATION_MESSAGE);

           
            int selectedTabIndex = jTabbedPane1.getSelectedIndex();
            jTabbedPane1.setTitleAt(selectedTabIndex, archivo.getName());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
                JOptionPane.showMessageDialog(this, 
        "Aplicaci√≥n Bloc de Notas\n" + "Desarrollado por: Jer√≥nimo\n" + "Versi√≥n: 1.0\n" + "Fecha: 24/10/2024", "Informaci√≥n de autor√≠a", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
                Color nuevoColor = javax.swing.JColorChooser.showDialog(this, "Elige un color para el texto", textArea.getForeground());

    if (nuevoColor != null) {
        JScrollPane scrollPane = (JScrollPane) jTabbedPane1.getSelectedComponent();
        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();
        
        textArea.setForeground(nuevoColor);
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Color nuevoColor = javax.swing.JColorChooser.showDialog(this, "Elige un color para el fondo", textArea.getBackground());
    if (nuevoColor != null) {
        JScrollPane scrollPane = (JScrollPane) jTabbedPane1.getSelectedComponent();
        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();       
        textArea.setBackground(nuevoColor);
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void MenuSeleccionarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSeleccionarTodoActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_MenuSeleccionarTodoActionPerformed

    private void MenuCopiarSeleccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCopiarSeleccActionPerformed
        String textoSeleccionado = textArea.getSelectedText();
    if (textoSeleccionado != null) {
        StringSelection seleccion = new StringSelection(textoSeleccionado);
        Clipboard portapapeles = Toolkit.getDefaultToolkit().getSystemClipboard();
        portapapeles.setContents(seleccion, null);
        
        JOptionPane.showMessageDialog(this, "Datos copiados al portapapeles.", 
            "Copiado", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "No hay texto seleccionado para copiar.", 
            "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_MenuCopiarSeleccActionPerformed

    private void MenuPegarSeleccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuPegarSeleccActionPerformed
        Clipboard portapapeles = Toolkit.getDefaultToolkit().getSystemClipboard();
    Transferable contenido = portapapeles.getContents(null);
    if (contenido != null && contenido.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        try {
            String texto = (String) contenido.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceSelection(texto); 
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_MenuPegarSeleccActionPerformed

    private void tipo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipo1ActionPerformed
        textArea.setFont(new Font("Arial", Font.PLAIN, 14));
    }//GEN-LAST:event_tipo1ActionPerformed

    private void tipo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipo2ActionPerformed
        textArea.setFont(new Font("Calibri", Font.ITALIC, 14));
    }//GEN-LAST:event_tipo2ActionPerformed

    private void tipo3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipo3ActionPerformed
        textArea.setFont(new Font("Times new Roman", Font.ITALIC, 14));
    }//GEN-LAST:event_tipo3ActionPerformed

    private void MenuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBuscarActionPerformed
       buscarPalabra();
    }//GEN-LAST:event_MenuBuscarActionPerformed

    private void MenuCortarSeleccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCortarSeleccActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuCortarSeleccActionPerformed
private void buscarPalabra() {
    String palabra = JOptionPane.showInputDialog(this, "Introduce la palabra a buscar:", "Buscar palabra", JOptionPane.QUESTION_MESSAGE);

    if (palabra != null && !palabra.trim().isEmpty()) { 
        String texto = textArea.getText(); 
        int index = texto.indexOf(palabra); 

        if (index != -1) { 
            textArea.setSelectionStart(index); 
            textArea.setSelectionEnd(index + palabra.length()); 
            JOptionPane.showMessageDialog(this, "La palabra \"" + palabra + "\" ha sido encontrada y seleccionada.", "Resultado de b√∫squeda", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "La palabra \"" + palabra + "\" no se encuentra en el texto.", "Resultado de b√∫squeda", JOptionPane.WARNING_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No se ingres√≥ ninguna palabra.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotasConPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotasConPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotasConPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotasConPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            
        
                new BlocDeNotasConPopUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuBuscar;
    private javax.swing.JMenuItem MenuCopiarSelecc;
    private javax.swing.JMenuItem MenuCortarSelecc;
    private javax.swing.JMenuItem MenuPegarSelecc;
    private javax.swing.JMenuItem MenuSeleccionarTodo;
    private javax.swing.JMenu MenuTipografia;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemAcercaDe;
    private javax.swing.JMenuItem jMenuItemCerrarPesta√±a;
    private javax.swing.JMenuItem jMenuItemColorFondo;
    private javax.swing.JMenuItem jMenuItemColorTexto;
    private javax.swing.JMenuItem jMenuItemGuardar;
    private javax.swing.JMenuItem jMenuItemNuevo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPopupMenu popUpMenu;
    private javax.swing.JTextArea textArea;
    private javax.swing.JMenuItem tipo1;
    private javax.swing.JMenuItem tipo2;
    private javax.swing.JMenuItem tipo3;
    // End of variables declaration//GEN-END:variables
}
